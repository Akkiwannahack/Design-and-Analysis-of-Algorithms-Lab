#include <stdio.h>
#include <stdlib.h>

// Function to sort the array in ascending order
void sort(int arr[], int n) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (arr[j] > arr[j + 1]) {
                int temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
        }
    }
}

// Function to perform optimal file merging and return the minimum cost
int optimalMerge(int files[], int n) {
    int totalCost = 0;

    while (n > 1) {
        // Sort to find the two smallest files
        sort(files, n);

        int first = files[0];
        int second = files[1];

        int mergeCost = first + second;
        totalCost += mergeCost;

        // Place merged file at index 0
        files[0] = mergeCost;

        // Shift elements to remove second smallest
        for (int i = 1; i < n - 1; i++) {
            files[i] = files[i + 1];
        }

        n--; // One file merged, so total count decreases
    }

    return totalCost;
}

int main() {
    int n;
    printf("Number of files: ");
    scanf("%d", &n);

    int *files = (int *)malloc(n * sizeof(int));
    printf("Enter the sizes of %d files: ", n);
    for (int i = 0; i < n; i++) {
        scanf("%d", &files[i]);
    }

    int minCost = optimalMerge(files, n);
    printf("Minimum cost of merging is: %d\n", minCost);

    free(files);
    return 0;
}

